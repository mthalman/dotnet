<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <!-- Fake, to satisfy the SDK. -->
    <TargetFramework>netstandard2.0</TargetFramework>
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>

    <DotNetInstallDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsTmpDir)', 'extracted-dotnet-sdk'))</DotNetInstallDir>
    <ScenarioTestsArtifactsDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'scenario-tests'))</ScenarioTestsArtifactsDir>
    <ScenarioTestsRunsDir>$([MSBuild]::NormalizeDirectory('$(ScenarioTestsArtifactsDir)', 'runs'))</ScenarioTestsRunsDir>
    <ScenarioTestsLocalFeedDir>$([MSBuild]::NormalizeDirectory('$(ScenarioTestsArtifactsDir)', 'feed'))</ScenarioTestsLocalFeedDir>
    <ScenarioTestsPackageExtractDir>$([MSBuild]::NormalizeDirectory('$(ScenarioTestsArtifactsDir)', 'pkg'))</ScenarioTestsPackageExtractDir>
    <ScenarioTestsResultsDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsTestResultsDir)', 'scenario-tests'))</ScenarioTestsResultsDir>
    <ScenarioTestsProjectName>Microsoft.DotNet.ScenarioTests.SdkTemplateTests</ScenarioTestsProjectName>
  </PropertyGroup>

  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.AddSourceToNuGetConfig" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" />

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <Target Name="Build">
    <PropertyGroup>
      <BuildModeInfoText Condition="'$(DotNetBuildSourceOnly)' == 'true'">source-build</BuildModeInfoText>
      <BuildModeInfoText Condition="'$(DotNetBuildSourceOnly)' != 'true'">non-source-build</BuildModeInfoText>
    </PropertyGroup>

    <Message Text="Build Mode: $(BuildModeInfoText)" Importance="high" />
    <Message Text="Build Environment: $(TargetArchitecture) $(Configuration) $(TargetOS) $(TargetRid)" Importance="high" />

    <MSBuild Projects="$(ToolsDir)init-build.proj;
                       $(RepoProjectsDir)$(RootRepo).proj"
             Targets="Build"
             BuildInParallel="false"
             StopOnFirstFailure="true" />
  </Target>

  <!-- Create a merge manifest from the individual repository manifest files. -->
  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.MergeAssetManifests" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" />
  <Target Name="MergeAssetManifests" AfterTargets="Build">
    <PropertyGroup>      
      <MergedAssetManifestOutputPath>$(ArtifactsDir)VerticalManifest.xml</MergedAssetManifestOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <RepoAssetManifest Include="$(AssetManifestsIntermediateDir)\**\*.xml" />
    </ItemGroup>

    <!-- It's OK for the VmrBuildNumber to be empty -->
    <Microsoft.DotNet.UnifiedBuild.Tasks.MergeAssetManifests 
      AssetManifest="@(RepoAssetManifest)" 
      MergedAssetManifestOutputPath="$(MergedAssetManifestOutputPath)"
      VmrBuildNumber="$(BUILD_BUILDNUMBER)" />
  </Target>

  <PropertyGroup>
    <ExtractDotNetSdkArchiveDependsOn>SetupScenarioTestsArtifacts;GetDotNetSdkArtifactPath</ExtractDotNetSdkArchiveDependsOn>
    <ExtractDotNetSdkArchiveDependsOn Condition="'$(ArchiveExtension)' == '.zip'">$(ExtractDotNetSdkArchiveDependsOn);ExtractDotNetSdkZip</ExtractDotNetSdkArchiveDependsOn>
    <ExtractDotNetSdkArchiveDependsOn Condition="'$(ArchiveExtension)' == '.tar.gz'">$(ExtractDotNetSdkArchiveDependsOn);ExtractDotNetSdkTarball</ExtractDotNetSdkArchiveDependsOn>
  </PropertyGroup>

  <Target Name="ExtractDotNetSdkArchive"
          DependsOnTargets="$(ExtractDotNetSdkArchiveDependsOn)" />

  <PropertyGroup>
    <_ScenarioTestsNuGetConfig>$(ScenarioTestsArtifactsDir)NuGet.config</_ScenarioTestsNuGetConfig>
    <_InstallerNuGetConfig>$(RepoRoot)src/installer/NuGet.config</_InstallerNuGetConfig>
  </PropertyGroup>

  <Target Name="SetupNuGetConfig"
          Inputs="$(_InstallerNuGetConfig)"
          Outputs="$(_ScenarioTestsNuGetConfig)">

    <Copy SourceFiles="$(_InstallerNuGetConfig)"
          DestinationFiles="$(_ScenarioTestsNuGetConfig)" />

    <AddSourceToNuGetConfig NuGetConfigFile="$(_ScenarioTestsNuGetConfig)"
                            SourceName="local-feed"
                            SourcePath="$(ScenarioTestsLocalFeedDir)" />
  </Target>

  <ItemGroup>
    <_ArtifactsPackage Include="$(ArtifactsShippingPackagesDir)**;
                                $(ArtifactsNonShippingPackagesDir)**"
                       Condition="!$([System.String]::Copy('%(Identity)').EndsWith('.symbols.nupkg'))" />
  </ItemGroup>

  <Target Name="CreateScenarioTestsLocalFeed">

    <RemoveDir Directories="$(ScenarioTestsLocalFeedDir)" />
    <MakeDir Directories="$(ScenarioTestsLocalFeedDir)" />
    <!-- Combine all packages into a single directory with symlinks so that we can have a single feed that points to them all. -->
    <Copy SourceFiles="@(_ArtifactsPackage)"
          DestinationFolder="$(ScenarioTestsLocalFeedDir)"
          UseSymbolicLinksIfPossible="true" />

  </Target>

  <Target Name="CreateScenarioTestsDirectoryBuildFiles"
          Outputs="@(_DirectoryProjFiles)">
    <!-- Define Directory.Build.* files in the scenario tests artifacts directory to prevent the test run from
         picking up the configuration from the VMR's Directory.Build.* files. We need an isolated configuration
         from which to test. -->
    <ItemGroup>
      <_DirectoryProjFiles Include="$(ScenarioTestsArtifactsDir)Directory.Build.props" />
      <_DirectoryProjFiles Include="$(ScenarioTestsArtifactsDir)Directory.Build.targets" />
    </ItemGroup>
    <WriteLinesToFile File="%(_DirectoryProjFiles.FullPath)"
                      Lines="&lt;Project /&gt;"
                      Overwrite="true" />
  </Target>  

  <Target Name="SetupScenarioTestsArtifacts"
          DependsOnTargets="SetupNuGetConfig;
                            CreateScenarioTestsLocalFeed;
                            CreateScenarioTestsDirectoryBuildFiles">
  </Target>

  <PropertyGroup>
    <ExtractDotNetSdkArchiveDependsOn>SetupScenarioTestsArtifacts;GetDotNetSdkTarball</ExtractDotNetSdkArchiveDependsOn>
    <ExtractDotNetSdkArchiveDependsOn Condition="'$(ArchiveExtension)' == '.zip'">$(ExtractDotNetSdkArchiveDependsOn);ExtractDotNetSdkZip</ExtractDotNetSdkArchiveDependsOn>
    <ExtractDotNetSdkArchiveDependsOn Condition="'$(ArchiveExtension)' == '.tar.gz'">$(ExtractDotNetSdkArchiveDependsOn);ExtractDotNetSdkTarball</ExtractDotNetSdkArchiveDependsOn>
  </PropertyGroup>

  <Target Name="ExtractDotNetSdkArchive"
          DependsOnTargets="$(ExtractDotNetSdkArchiveDependsOn)" />

  <Target Name="ExtractDotNetSdkTarball">
    <MakeDir Directories="$(DotNetInstallDir)" />
    <Exec Command="tar -xzf @(SdkTarballItem) -C $(DotNetInstallDir)" />
  </Target>

  <Target Name="ExtractDotNetSdkZip">
    <MakeDir Directories="$(DotNetInstallDir)" />
    <Unzip SourceFiles="@(SdkTarballItem)" DestinationFolder="$(DotNetInstallDir)" />
  </Target>

  <Target Name="ExtractScenarioTestsPackage">
    <ItemGroup>
      <_ScenarioTestPackage Include="$(ArtifactsShippingPackagesDir)scenario-tests/**/*.nupkg" />
    </ItemGroup>
    
    <Unzip SourceFiles="@(_ScenarioTestPackage)" DestinationFolder="$(ScenarioTestsPackageExtractDir)" />

    <ItemGroup>
      <_ScenarioTestDll Include="$(ScenarioTestsPackageExtractDir)tools/**/$(ScenarioTestsProjectName).dll" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <RunTestsTargets>$(RunTestsTargets);RunScenarioTests</RunTestsTargets>
  </PropertyGroup>

  <Target Name="Test" DependsOnTargets="ExtractDotNetSdkArchive;ExtractScenarioTestsPackage;$(RunTestsTargets)" />

  <Target Name="RunScenarioTests"
          Condition="'$(DotNetTestProjectsToRun)' == '' or $(DotNetTestProjectsToRun.Contains('$(ScenarioTestsProjectName)'))">
    <Message Text="Running scenario tests: $(TargetArchitecture) $(Configuration) $(TargetOS) $(TargetRid)" Importance="high" />

    <ItemGroup>
      <_DotNetPath Include="$(DotNetInstallDir)sdk/**/dotnet.dll" />
    </ItemGroup>

    <PropertyGroup>
      <_CurrentDateTime>$([System.DateTime]::Now.ToString("yyyy-MM-dd_HH_mm_ss"))</_CurrentDateTime>
      <_TestXmlOutputPath>$(ScenarioTestsResultsDir)$(_CurrentDateTime).xml</_TestXmlOutputPath>
      <_ScenarioTestsArgs>--dotnet-root $(DotNetInstallDir) --xml $(_TestXmlOutputPath) --target-rid $(TargetRid) --test-root $(ScenarioTestsRunsDir)$(_CurrentDateTime) --no-cleanup --no-traits Category=MultiTFM</_ScenarioTestsArgs>
      <_MSBuildSdksDir>/%(_DotNetPath.Directory)Sdks</_MSBuildSdksDir>
    </PropertyGroup>

    <ItemGroup>
      <_ScenarioTestsEnvVars Include="LOCAL_FEED_PATH=$(ArtifactsShippingPackagesDir)" />
      <_ScenarioTestsEnvVars Include="MSBuildSDKsPath=$(_MSBuildSdksDir)" />
    </ItemGroup>

    <MakeDir Directories="$(ScenarioTestsResultsDir);$(ScenarioTestsRunsDir)" />

    <Exec Command="$(DotnetTool) @(_ScenarioTestDll) $(_ScenarioTestsArgs)"
          EnvironmentVariables="@(_ScenarioTestsEnvVars)" />
  </Target>

  <Import Project="$(RepositoryEngineeringDir)build.sourcebuild.targets" Condition="'$(DotNetBuildSourceOnly)' == 'true'" />

  <!-- Intentionally below the import to appear at the end. -->
  <Target Name="LogBuildOutputFolders"
          AfterTargets="Build">
   <Message Importance="high" Text="Shipping packages are located in '$(ArtifactsShippingPackagesDir)'." />
   <Message Importance="high" Text="Shipping assets are located in '$(ArtifactsAssetsDir)'." />
  </Target>

</Project>
