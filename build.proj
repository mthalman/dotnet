<Project Sdk="Microsoft.Build.Traversal" InitialTargets="PrintInfo">

<!-- Default targets and parallelization -->
 <ItemDefinitionGroup>
    <ProjectReference>
      <Test>false</Test>
      <Publish>false</Publish>
      <BuildInParallel>false</BuildInParallel>
    </ProjectReference>
  </ItemDefinitionGroup>

  <ItemGroup>
    <!-- Pre-build: Init tools-->
    <ProjectReference Include="$(RepositoryEngineeringDir)init-cross-build.proj"
                      Condition="'$(BuildOS)' != 'windows' and '$(CrossBuild)' == 'true' and '$(ROOTFS_DIR)' == ''"
                      BuildInParallel="true" />
    <ProjectReference Include="$(RepositoryEngineeringDir)init-poison.proj"
                      Condition="'$(EnablePoison)' == 'true'"
                      BuildInParallel="true" />
    <ProjectReference Include="$(ToolsDir)tools.proj" BuildInParallel="true" />

    <ProjectReference Include="$(RepoProjectsDir)$(RootRepo).proj" />

    <!-- Post-build: Source-only validation, packaging and publishing -->
    <ProjectReference Include="$(RepositoryEngineeringDir)finish-source-only.proj" Condition="'$(DotNetBuildSourceOnly)' == 'true'" />
    <ProjectReference Include="$(RepositoryEngineeringDir)publish.proj" />
  </ItemGroup>

  <Target Name="PrintInfo">
    <PropertyGroup>
      <BuildModeInfoText Condition="'$(DotNetBuildSourceOnly)' == 'true'">source-build</BuildModeInfoText>
      <BuildModeInfoText Condition="'$(DotNetBuildSourceOnly)' != 'true'">non-source-build</BuildModeInfoText>
    </PropertyGroup>

    <Message Text="Build Mode: $(BuildModeInfoText)" Importance="high" />
    <Message Text="Build Environment: $(TargetArchitecture) $(Configuration) $(TargetOS) $(TargetRid)" Importance="high" />
  </Target>

  <PropertyGroup>
    <ScenarioTestsArtifactsDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'scenario-tests'))</ScenarioTestsArtifactsDir>
    <ScenarioTestsResultsDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsTestResultsDir)', 'scenario-tests'))</ScenarioTestsResultsDir>
    <_ScenarioTestsNuGetConfig>$(ScenarioTestsArtifactsDir)NuGet.config</_ScenarioTestsNuGetConfig>
    <_InstallerNuGetConfig>$(RepoRoot)src/installer/NuGet.config</_InstallerNuGetConfig>
  </PropertyGroup>

  <Target Name="SetupNuGetConfig"
          Inputs="$(_InstallerNuGetConfig)"
          Outputs="$(_ScenarioTestsNuGetConfig)">

    <Copy SourceFiles="$(_InstallerNuGetConfig)"
          DestinationFiles="$(_ScenarioTestsNuGetConfig)" />

  </Target>

  <PropertyGroup>
    <RunTestsTargets>$(RunTestsTargets);RunScenarioTests</RunTestsTargets>
  </PropertyGroup>

  <Target Name="Test" DependsOnTargets="SetupNuGetConfig;GetDotNetSdkArchive;$(RunTestsTargets)" />

  <Target Name="RunScenarioTests"
          DependsOnTargets="DetermineSourceBuiltSdkVersion">
    <Message Text="Running scenario tests: $(TargetArchitecture) $(Configuration) $(TargetOS) $(TargetRid)" Importance="high" />
    <PropertyGroup>
      <_CurrentDateTime>$([System.DateTime]::Now.ToString("yyyy-MM-dd_HH_mm_ss"))</_CurrentDateTime>
      <_TestXmlOutputPath>$(ScenarioTestsResultsDir)$(_CurrentDateTime).xml</_TestXmlOutputPath>
      <_ScenarioTestsAdditionalArgs>--xml $(_TestXmlOutputPath) --target-rid $(TargetRid) --no-cleanup --no-traits Category=MultiTFM</_ScenarioTestsAdditionalArgs>

      <!-- Define the test root as a sub-directory of the scenario test artifacts directory. It needs to be a sub-directory because the scenario test execution
           will clean that directory. Since we need the NuGet.config file that we copied in to be preserved, that's stored in the directory above the test root. -->
      <_TestRoot>$(ScenarioTestsArtifactsDir)artifacts/</_TestRoot>
    </PropertyGroup>

    <MakeDir Directories="$(ScenarioTestsResultsDir)" />

    <Message Text="NETCoreSdkVersion=$(NETCoreSdkVersion)" Importance="high" />

    <Exec Command="$(RepoRoot)src/scenario-tests/build$(ShellExtension) /bl --configuration $(Configuration) --test /p:TestRoot=$(_TestRoot) /p:DotNetRoot=$(DotNetSdkExtractDir) /p:NETCoreSdkVersion=$(SourceBuiltSdkVersion)"
          EnvironmentVariables="AdditionalTestArgs=$(_ScenarioTestsAdditionalArgs);DOTNET_INSTALL_DIR=$(DotNetRoot)"/>
  </Target>

  <Import Project="$(RepositoryEngineeringDir)build.sourcebuild.targets" Condition="'$(DotNetBuildSourceOnly)' == 'true'" />

  <Target Name="LogBuildOutputFolders"
          AfterTargets="Build">
    <Message Importance="high" Text="Shipping packages are located in '$(ArtifactsShippingPackagesDir)'." />
    <Message Importance="high" Text="Shipping assets are located in '$(ArtifactsAssetsDir)'." />
  </Target>

</Project>
