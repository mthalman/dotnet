<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <!-- Fake, to satisfy the SDK. -->
    <TargetFramework>netstandard2.0</TargetFramework>
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>

    <ScenarioTestsArtifactsDir>$(ArtifactsDir)scenario-tests/</ScenarioTestsArtifactsDir>
  </PropertyGroup>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <Target Name="Build">
    <PropertyGroup>
      <BuildModeInfoText Condition="'$(DotNetBuildSourceOnly)' == 'true'">source-build</BuildModeInfoText>
      <BuildModeInfoText Condition="'$(DotNetBuildSourceOnly)' != 'true'">non-source-build</BuildModeInfoText>
    </PropertyGroup>

    <Message Text="Build Mode: $(BuildModeInfoText)" Importance="high" />
    <Message Text="Build Environment: $(TargetArchitecture) $(Configuration) $(TargetOS) $(TargetRid)" Importance="high" />

    <MSBuild Projects="$(ToolsDir)init-build.proj;
                       $(RepoProjectsDir)$(RootRepo).proj"
             Targets="Build"
             BuildInParallel="false"
             StopOnFirstFailure="true" />
  </Target>

  <!-- Create a merge manifest from the individual repository manifest files. -->
  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.MergeAssetManifests" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" />
  <Target Name="MergeAssetManifests" AfterTargets="Build">
    <PropertyGroup>      
      <MergedAssetManifestOutputPath>$(ArtifactsDir)VerticalManifest.xml</MergedAssetManifestOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <RepoAssetManifest Include="$(AssetManifestsIntermediateDir)\**\*.xml" />
    </ItemGroup>

    <!-- It's OK for the VmrBuildNumber to be empty -->
    <Microsoft.DotNet.UnifiedBuild.Tasks.MergeAssetManifests 
      AssetManifest="@(RepoAssetManifest)" 
      MergedAssetManifestOutputPath="$(MergedAssetManifestOutputPath)"
      VmrBuildNumber="$(BUILD_BUILDNUMBER)" />
  </Target>

  <PropertyGroup>
    <ExtractDotNetSdkArchiveDependsOn>CleanScenarioTestsArtifactsDir;CreateDotNetInstallDir</ExtractDotNetSdkArchiveDependsOn>
    <ExtractDotNetSdkArchiveDependsOn Condition="'$(ArchiveExtension)' == '.zip'">$(ExtractDotNetSdkArchiveDependsOn);ExtractDotNetSdkZip</ExtractDotNetSdkArchiveDependsOn>
    <ExtractDotNetSdkArchiveDependsOn Condition="'$(ArchiveExtension)' == '.tar.gz'">$(ExtractDotNetSdkArchiveDependsOn);ExtractDotNetSdkTarball</ExtractDotNetSdkArchiveDependsOn>
  </PropertyGroup>

  <Target Name="CreateDotNetInstallDir"
          DependsOnTargets="$(CreateDotNetInstallDirDependsOn)">
    <PropertyGroup>
      <DotNetInstallTempDir>$(ScenarioTestsArtifactsDir)dotnet-sdk</DotNetInstallTempDir>
    </PropertyGroup>
    <MakeDir Directories="$(DotNetInstallTempDir)" />
  </Target>

  <Target Name="ExtractDotNetSdkArchive"
          DependsOnTargets="$(ExtractDotNetSdkArchiveDependsOn)" />

  <Target Name="ExtractDotNetSdkTarball"
          Outputs="@(DotNetSdkArtifactPath)">
    <Exec Command="tar -xzf @(DotNetSdkArtifactPath) -C $(DotNetInstallTempDir)" />
  </Target>

  <Target Name="ExtractDotNetSdkZip"
          Outputs="@(DotNetSdkArtifactPath)">
    <Unzip SourceFiles="@(DotNetSdkArtifactPath)" DestinationFolder="$(DotNetInstallTempDir)" />
  </Target>

  <Target Name="CleanScenarioTestsArtifactsDir"
          DependsOnTargets="GetDotNetSdkArtifactPath"
          Outputs="@(DotNetSdkArtifactPath)">
    <RemoveDir Directories="$(ScenarioTestsArtifactsDir)" />
  </Target>

  <Target Name="Test"
          DependsOnTargets="ExtractDotNetSdkArchive">
    <Message Text="Running scenario tests: $(TargetArchitecture) $(Configuration) $(TargetOS) $(TargetRid)" Importance="high" />

    <PropertyGroup>
      <_ScenarioTestsDllPath>src/scenario-tests/artifacts/bin/Microsoft.DotNet.ScenarioTests.SdkTemplateTests/$(Configuration)/$(NetCurrent)/Microsoft.DotNet.ScenarioTests.SdkTemplateTests.dll</_ScenarioTestsDllPath>
      <_CurrentDateTime>$([System.DateTime]::Now.ToString("yyyy-MM-dd_HH_mm_ss"))</_CurrentDateTime>
      <_TestXmlOutputPath>$(ArtifactsTestResultsDir)scenario-tests/$(_CurrentDateTime).xml</_TestXmlOutputPath>

      <_ScenarioTestsArgs>--dotnet-root $(DotNetInstallTempDir) --xml $(_TestXmlOutputPath) --test-root $(ScenarioTestsArtifactsDir) --no-cleanup</_ScenarioTestsArgs>
      <_ScenarioTestsArgs Condition="'$(DotNetBuildSourceOnly)' == 'true'">$(_ScenarioTestsArgs) --no-traits Category=MultiTFM</_ScenarioTestsArgs>
    </PropertyGroup>

    <ItemGroup>
      <!-- <_ScenarioTestsEnvVars Include="NUGET_PACKAGES=$(ArtifactsShippingPackagesDir)" /> -->

      <!-- The projects that are created by the scenario tests will be built and derive the BaseIntermediateOutputPath
           defined in Directory.Build.props. This overrides the root of that dir so that the output of those builds get
           placed within the scenario tests temp dir. Otherwise, the artifacts of the VMR would get polluted with a
           bunch of test project output. -->
      <_ScenarioTestsEnvVars Include="ArtifactsDir=$(ScenarioTestsArtifactsDir)" />
    </ItemGroup>

    <Exec Command="NUGET_PACKAGES=$(ArtifactsShippingPackagesDir) $(DotnetTool) $(_ScenarioTestsDllPath) $(_ScenarioTestsArgs)"
          EnvironmentVariables="@(_ScenarioTestsEnvVars)" />
  </Target>

  <Import Project="$(RepositoryEngineeringDir)build.sourcebuild.targets" Condition="'$(DotNetBuildSourceOnly)' == 'true'" />

  <!-- Intentionally below the import to appear at the end. -->
  <Target Name="LogBuildOutputFolders"
          AfterTargets="Build">
   <Message Importance="high" Text="Shipping packages are located in '$(ArtifactsShippingPackagesDir)'." />
   <Message Importance="high" Text="Shipping assets are located in '$(ArtifactsAssetsDir)'." />
  </Target>

</Project>
