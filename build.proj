<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <!-- Fake, to satisfy the SDK. -->
    <TargetFramework>netstandard2.0</TargetFramework>
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>

    <ScenarioTestsArtifactsDir>$(ArtifactsDir)scenario-tests/</ScenarioTestsArtifactsDir>
    <ScenarioTestsDotNetInstallDir>$(ScenarioTestsArtifactsDir)dotnet-sdk</ScenarioTestsDotNetInstallDir>
    <ScenarioTestsRunsDir>$(ScenarioTestsArtifactsDir)runs/</ScenarioTestsRunsDir>
    <ScenarioTestsLocalFeedDir>$(ScenarioTestsArtifactsDir)feed/</ScenarioTestsLocalFeedDir>
  </PropertyGroup>

  <UsingTask AssemblyFile="$(XPlatSourceBuildTasksAssembly)" TaskName="AddSourceToNuGetConfig" />

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <Target Name="Build">
    <PropertyGroup>
      <BuildModeInfoText Condition="'$(DotNetBuildSourceOnly)' == 'true'">source-build</BuildModeInfoText>
      <BuildModeInfoText Condition="'$(DotNetBuildSourceOnly)' != 'true'">non-source-build</BuildModeInfoText>
    </PropertyGroup>

    <Message Text="Build Mode: $(BuildModeInfoText)" Importance="high" />
    <Message Text="Build Environment: $(TargetArchitecture) $(Configuration) $(TargetOS) $(TargetRid)" Importance="high" />

    <MSBuild Projects="$(ToolsDir)init-build.proj;
                       $(RepoProjectsDir)$(RootRepo).proj"
             Targets="Build"
             BuildInParallel="false"
             StopOnFirstFailure="true" />
  </Target>

  <!-- Create a merge manifest from the individual repository manifest files. -->
  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.MergeAssetManifests" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" />
  <Target Name="MergeAssetManifests" AfterTargets="Build">
    <PropertyGroup>      
      <MergedAssetManifestOutputPath>$(ArtifactsDir)VerticalManifest.xml</MergedAssetManifestOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <RepoAssetManifest Include="$(AssetManifestsIntermediateDir)\**\*.xml" />
    </ItemGroup>

    <!-- It's OK for the VmrBuildNumber to be empty -->
    <Microsoft.DotNet.UnifiedBuild.Tasks.MergeAssetManifests 
      AssetManifest="@(RepoAssetManifest)" 
      MergedAssetManifestOutputPath="$(MergedAssetManifestOutputPath)"
      VmrBuildNumber="$(BUILD_BUILDNUMBER)" />
  </Target>

  <PropertyGroup>
    <ExtractDotNetSdkArchiveDependsOn>SetupScenarioTestsArtifacts</ExtractDotNetSdkArchiveDependsOn>
    <ExtractDotNetSdkArchiveDependsOn Condition="'$(ArchiveExtension)' == '.zip'">$(ExtractDotNetSdkArchiveDependsOn);ExtractDotNetSdkZip</ExtractDotNetSdkArchiveDependsOn>
    <ExtractDotNetSdkArchiveDependsOn Condition="'$(ArchiveExtension)' == '.tar.gz'">$(ExtractDotNetSdkArchiveDependsOn);ExtractDotNetSdkTarball</ExtractDotNetSdkArchiveDependsOn>
  </PropertyGroup>

  <Target Name="SetupScenarioTestsArtifacts">
    <PropertyGroup>
      <_ScenarioTestsNuGetPath>$(ScenarioTestsArtifactsDir)/NuGet.config</_ScenarioTestsNuGetPath>
    </PropertyGroup>

    <MakeDir Directories="$(ScenarioTestsDotNetInstallDir);$(ScenarioTestsRunsDir);$(ScenarioTestsLocalFeedDir)" />
    <Copy SourceFiles="$(MSBuildThisFileDirectory)src/installer/NuGet.config"
          DestinationFiles="$(_ScenarioTestsNuGetPath)" />

    <!-- Combine all packages into a single directory with symlinks so that we can have a single feed that points to them all. -->
    <ItemGroup>
      <_ArtifactsPackageToBundle Include="$(ArtifactsShippingPackagesDir)**;
                                          $(ArtifactsNonShippingPackagesDir)**"
                                 Condition="!$([System.String]::Copy('%(Identity)').EndsWith('.symbols.nupkg'))" />
    </ItemGroup>
    <Copy SourceFiles="@(_ArtifactsPackageToBundle)"
          DestinationFolder="$(ScenarioTestsLocalFeedDir)"
          UseSymbolicLinksIfPossible="true" />

    <AddSourceToNuGetConfig NuGetConfigFile="$(_ScenarioTestsNuGetPath)"
                            SourceName="local-feed"
                            SourcePath="$(ScenarioTestsLocalFeedDir)" />

    <ItemGroup>
      <_DirectoryProjFiles Include="$(ScenarioTestsArtifactsDir)Directory.Build.props" />
      <_DirectoryProjFiles Include="$(ScenarioTestsArtifactsDir)Directory.Build.targets" />
    </ItemGroup>
    <!-- TODO: Still needed? -->
    <WriteLinesToFile File="%(_DirectoryProjFiles.FullPath)"
                      Lines="&lt;Project /&gt;"
                      Overwrite="true" />
  </Target>

  <Target Name="ExtractDotNetSdkArchive"
          DependsOnTargets="$(ExtractDotNetSdkArchiveDependsOn)" />

  <Target Name="ExtractDotNetSdkTarball"
          Inputs="@(DotNetSdkArtifactPath)"
          Outputs="$(ScenarioTestsDotNetInstallDir)">
    <Exec Command="tar -xzf @(DotNetSdkArtifactPath) -C $(ScenarioTestsDotNetInstallDir)" />
  </Target>

  <Target Name="ExtractDotNetSdkZip"
          Inputs="@(DotNetSdkArtifactPath)"
          Outputs="$(ScenarioTestsDotNetInstallDir)">
    <Unzip SourceFiles="@(DotNetSdkArtifactPath)" DestinationFolder="$(ScenarioTestsDotNetInstallDir)" />
  </Target>

  <Target Name="Test"
          DependsOnTargets="ExtractDotNetSdkArchive">
    <Message Text="Running scenario tests: $(TargetArchitecture) $(Configuration) $(TargetOS) $(TargetRid)" Importance="high" />

    <PropertyGroup>
      <_ScenarioTestsDllPath>src/scenario-tests/artifacts/bin/Microsoft.DotNet.ScenarioTests.SdkTemplateTests/$(Configuration)/$(NetCurrent)/Microsoft.DotNet.ScenarioTests.SdkTemplateTests.dll</_ScenarioTestsDllPath>
      <_CurrentDateTime>$([System.DateTime]::Now.ToString("yyyy-MM-dd_HH_mm_ss"))</_CurrentDateTime>
      <_TestXmlOutputPath>$(ArtifactsTestResultsDir)scenario-tests/$(_CurrentDateTime).xml</_TestXmlOutputPath>

      <_ScenarioTestsArgs>--dotnet-root $(ScenarioTestsDotNetInstallDir) --xml $(_TestXmlOutputPath) --target-rid $(TargetRid) --test-root $(ScenarioTestsRunsDir)$(_CurrentDateTime) --no-cleanup</_ScenarioTestsArgs>
      <_ScenarioTestsArgs Condition="'$(DotNetBuildSourceOnly)' == 'true'">$(_ScenarioTestsArgs) --no-traits Category=MultiTFM</_ScenarioTestsArgs>
    </PropertyGroup>

    <ItemGroup>
      <_ScenarioTestsEnvVars Include="LOCAL_FEED_PATH=$(ArtifactsShippingPackagesDir)" />

      <!-- Need to clear out this value so it doesn't inherit the ambient value in the current build which is tied to
           the VMR's local .NET install (i.e. ".dotnet" directory). That will pollute the targets which end up getting
           used for the SDK that we want to test. -->
      <_ScenarioTestsEnvVars Include="MSBuildSDKsPath=" />

      <!-- The projects that are created by the scenario tests will be built and derive the BaseIntermediateOutputPath
           defined in Directory.Build.props. This overrides the root of that dir so that the output of those builds get
           placed within the scenario tests temp dir. Otherwise, the artifacts of the VMR would get polluted with a
           bunch of test project output. -->
      <_ScenarioTestsEnvVars Include="ArtifactsDir=$(ScenarioTestsArtifactsDir)" />
    </ItemGroup>

    <Exec Command="$(DotnetTool) $(_ScenarioTestsDllPath) $(_ScenarioTestsArgs)"
          EnvironmentVariables="@(_ScenarioTestsEnvVars)" />
  </Target>

  <Import Project="$(RepositoryEngineeringDir)build.sourcebuild.targets" Condition="'$(DotNetBuildSourceOnly)' == 'true'" />

  <!-- Intentionally below the import to appear at the end. -->
  <Target Name="LogBuildOutputFolders"
          AfterTargets="Build">
   <Message Importance="high" Text="Shipping packages are located in '$(ArtifactsShippingPackagesDir)'." />
   <Message Importance="high" Text="Shipping assets are located in '$(ArtifactsAssetsDir)'." />
  </Target>

</Project>
